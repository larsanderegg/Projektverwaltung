// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.lan.teko.model;

import ch.lan.teko.model.FinanceResource;
import ch.lan.teko.model.FinanceResourceDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect FinanceResourceDataOnDemand_Roo_DataOnDemand {
    
    declare @type: FinanceResourceDataOnDemand: @Component;
    
    private Random FinanceResourceDataOnDemand.rnd = new SecureRandom();
    
    private List<FinanceResource> FinanceResourceDataOnDemand.data;
    
    public FinanceResource FinanceResourceDataOnDemand.getNewTransientFinanceResource(int index) {
        FinanceResource obj = new FinanceResource();
        setActivityId(obj, index);
        setEffectiv(obj, index);
        setExplanation(obj, index);
        setPlaned(obj, index);
        setType(obj, index);
        return obj;
    }
    
    public void FinanceResourceDataOnDemand.setActivityId(FinanceResource obj, int index) {
        Long activityId = new Integer(index).longValue();
        obj.setActivityId(activityId);
    }
    
    public void FinanceResourceDataOnDemand.setEffectiv(FinanceResource obj, int index) {
        Integer effectiv = new Integer(index);
        obj.setEffectiv(effectiv);
    }
    
    public void FinanceResourceDataOnDemand.setExplanation(FinanceResource obj, int index) {
        String explanation = "explanation_" + index;
        obj.setExplanation(explanation);
    }
    
    public void FinanceResourceDataOnDemand.setPlaned(FinanceResource obj, int index) {
        Integer planed = new Integer(index);
        obj.setPlaned(planed);
    }
    
    public void FinanceResourceDataOnDemand.setType(FinanceResource obj, int index) {
        String type = "type_" + index;
        obj.setType(type);
    }
    
    public FinanceResource FinanceResourceDataOnDemand.getSpecificFinanceResource(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        FinanceResource obj = data.get(index);
        Long id = obj.getId();
        return FinanceResource.findFinanceResource(id);
    }
    
    public FinanceResource FinanceResourceDataOnDemand.getRandomFinanceResource() {
        init();
        FinanceResource obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return FinanceResource.findFinanceResource(id);
    }
    
    public boolean FinanceResourceDataOnDemand.modifyFinanceResource(FinanceResource obj) {
        return false;
    }
    
    public void FinanceResourceDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = FinanceResource.findFinanceResourceEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'FinanceResource' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<FinanceResource>();
        for (int i = 0; i < 10; i++) {
            FinanceResource obj = getNewTransientFinanceResource(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
